// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvm.proto

#ifndef PROTOBUF_nvm_2eproto__INCLUDED
#define PROTOBUF_nvm_2eproto__INCLUDED
#define PROTOBUF_USE_DLLS
#include <string>

#include <google/protobuf/stubs/common.h>
#define PROTOBUF_USE_DLLS
#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace NVMMsgProto {
class NVM;
class NVMDefaultTypeInternal;
extern NVMDefaultTypeInternal _NVM_default_instance_;
}  // namespace NVMMsgProto

namespace NVMMsgProto {

namespace protobuf_nvm_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_nvm_2eproto

// ===================================================================

class NVM : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NVMMsgProto.NVM) */ {
 public:
  NVM();
  virtual ~NVM();

  NVM(const NVM& from);

  inline NVM& operator=(const NVM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NVM& default_instance();

  static inline const NVM* internal_default_instance() {
    return reinterpret_cast<const NVM*>(
               &_NVM_default_instance_);
  }

  void Swap(NVM* other);

  // implements Message ----------------------------------------------

  inline NVM* New() const PROTOBUF_FINAL { return New(NULL); }

  NVM* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NVM& from);
  void MergeFrom(const NVM& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NVM* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string linhas = 3;
  int linhas_size() const;
  void clear_linhas();
  static const int kLinhasFieldNumber = 3;
  const ::std::string& linhas(int index) const;
  ::std::string* mutable_linhas(int index);
  void set_linhas(int index, const ::std::string& value);
  void set_linhas(int index, const char* value);
  void set_linhas(int index, const char* value, size_t size);
  ::std::string* add_linhas();
  void add_linhas(const ::std::string& value);
  void add_linhas(const char* value);
  void add_linhas(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& linhas() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_linhas();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 nlinhas = 2;
  bool has_nlinhas() const;
  void clear_nlinhas();
  static const int kNlinhasFieldNumber = 2;
  ::google::protobuf::int32 nlinhas() const;
  void set_nlinhas(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NVMMsgProto.NVM)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_nlinhas();
  void clear_has_nlinhas();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> linhas_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 nlinhas_;
  friend struct  protobuf_nvm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NVM

// required string name = 1;
inline bool NVM::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NVM::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NVM::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NVM::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& NVM::name() const {
  // @@protoc_insertion_point(field_get:NVMMsgProto.NVM.name)
  return name_.GetNoArena();
}
inline void NVM::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NVMMsgProto.NVM.name)
}
#if LANG_CXX11
inline void NVM::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NVMMsgProto.NVM.name)
}
#endif
inline void NVM::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NVMMsgProto.NVM.name)
}
inline void NVM::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NVMMsgProto.NVM.name)
}
inline ::std::string* NVM::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:NVMMsgProto.NVM.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NVM::release_name() {
  // @@protoc_insertion_point(field_release:NVMMsgProto.NVM.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NVM::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NVMMsgProto.NVM.name)
}

// required int32 nlinhas = 2;
inline bool NVM::has_nlinhas() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NVM::set_has_nlinhas() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NVM::clear_has_nlinhas() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NVM::clear_nlinhas() {
  nlinhas_ = 0;
  clear_has_nlinhas();
}
inline ::google::protobuf::int32 NVM::nlinhas() const {
  // @@protoc_insertion_point(field_get:NVMMsgProto.NVM.nlinhas)
  return nlinhas_;
}
inline void NVM::set_nlinhas(::google::protobuf::int32 value) {
  set_has_nlinhas();
  nlinhas_ = value;
  // @@protoc_insertion_point(field_set:NVMMsgProto.NVM.nlinhas)
}

// repeated string linhas = 3;
inline int NVM::linhas_size() const {
  return linhas_.size();
}
inline void NVM::clear_linhas() {
  linhas_.Clear();
}
inline const ::std::string& NVM::linhas(int index) const {
  // @@protoc_insertion_point(field_get:NVMMsgProto.NVM.linhas)
  return linhas_.Get(index);
}
inline ::std::string* NVM::mutable_linhas(int index) {
  // @@protoc_insertion_point(field_mutable:NVMMsgProto.NVM.linhas)
  return linhas_.Mutable(index);
}
inline void NVM::set_linhas(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NVMMsgProto.NVM.linhas)
  linhas_.Mutable(index)->assign(value);
}
inline void NVM::set_linhas(int index, const char* value) {
  linhas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NVMMsgProto.NVM.linhas)
}
inline void NVM::set_linhas(int index, const char* value, size_t size) {
  linhas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NVMMsgProto.NVM.linhas)
}
inline ::std::string* NVM::add_linhas() {
  // @@protoc_insertion_point(field_add_mutable:NVMMsgProto.NVM.linhas)
  return linhas_.Add();
}
inline void NVM::add_linhas(const ::std::string& value) {
  linhas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NVMMsgProto.NVM.linhas)
}
inline void NVM::add_linhas(const char* value) {
  linhas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NVMMsgProto.NVM.linhas)
}
inline void NVM::add_linhas(const char* value, size_t size) {
  linhas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NVMMsgProto.NVM.linhas)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NVM::linhas() const {
  // @@protoc_insertion_point(field_list:NVMMsgProto.NVM.linhas)
  return linhas_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NVM::mutable_linhas() {
  // @@protoc_insertion_point(field_mutable_list:NVMMsgProto.NVM.linhas)
  return &linhas_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace NVMMsgProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nvm_2eproto__INCLUDED
