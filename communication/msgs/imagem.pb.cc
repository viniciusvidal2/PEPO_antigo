// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imagem.proto

#include "imagem.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_imagem_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Imagem_Pixel_imagem_2eproto;
namespace ImagemMsgProto {
class Imagem_PixelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Imagem_Pixel> _instance;
} _Imagem_Pixel_default_instance_;
class ImagemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Imagem> _instance;
} _Imagem_default_instance_;
}  // namespace ImagemMsgProto
static void InitDefaultsscc_info_Imagem_imagem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImagemMsgProto::_Imagem_default_instance_;
    new (ptr) ::ImagemMsgProto::Imagem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImagemMsgProto::Imagem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Imagem_imagem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Imagem_imagem_2eproto}, {
      &scc_info_Imagem_Pixel_imagem_2eproto.base,}};

static void InitDefaultsscc_info_Imagem_Pixel_imagem_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ImagemMsgProto::_Imagem_Pixel_default_instance_;
    new (ptr) ::ImagemMsgProto::Imagem_Pixel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ImagemMsgProto::Imagem_Pixel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Imagem_Pixel_imagem_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Imagem_Pixel_imagem_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_imagem_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_imagem_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_imagem_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_imagem_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem_Pixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem_Pixel, r_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem_Pixel, g_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem_Pixel, b_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem_Pixel, u_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem_Pixel, v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem, name_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem, height_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem, width_),
  PROTOBUF_FIELD_OFFSET(::ImagemMsgProto::Imagem, pixels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ImagemMsgProto::Imagem_Pixel)},
  { 10, -1, sizeof(::ImagemMsgProto::Imagem)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ImagemMsgProto::_Imagem_Pixel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ImagemMsgProto::_Imagem_default_instance_),
};

const char descriptor_table_protodef_imagem_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014imagem.proto\022\016ImagemMsgProto\"\243\001\n\006Image"
  "m\022\014\n\004name\030\001 \001(\t\022\016\n\006height\030\002 \001(\005\022\r\n\005width"
  "\030\003 \001(\005\022,\n\006pixels\030\004 \003(\0132\034.ImagemMsgProto."
  "Imagem.Pixel\032>\n\005Pixel\022\t\n\001r\030\001 \001(\005\022\t\n\001g\030\002 "
  "\001(\005\022\t\n\001b\030\003 \001(\005\022\t\n\001u\030\004 \001(\005\022\t\n\001v\030\005 \001(\005b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_imagem_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_imagem_2eproto_sccs[2] = {
  &scc_info_Imagem_imagem_2eproto.base,
  &scc_info_Imagem_Pixel_imagem_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_imagem_2eproto_once;
static bool descriptor_table_imagem_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imagem_2eproto = {
  &descriptor_table_imagem_2eproto_initialized, descriptor_table_protodef_imagem_2eproto, "imagem.proto", 204,
  &descriptor_table_imagem_2eproto_once, descriptor_table_imagem_2eproto_sccs, descriptor_table_imagem_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_imagem_2eproto::offsets,
  file_level_metadata_imagem_2eproto, 2, file_level_enum_descriptors_imagem_2eproto, file_level_service_descriptors_imagem_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_imagem_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_imagem_2eproto), true);
namespace ImagemMsgProto {

// ===================================================================

void Imagem_Pixel::InitAsDefaultInstance() {
}
class Imagem_Pixel::_Internal {
 public:
};

Imagem_Pixel::Imagem_Pixel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImagemMsgProto.Imagem.Pixel)
}
Imagem_Pixel::Imagem_Pixel(const Imagem_Pixel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&r_)) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:ImagemMsgProto.Imagem.Pixel)
}

void Imagem_Pixel::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&r_)) + sizeof(v_));
}

Imagem_Pixel::~Imagem_Pixel() {
  // @@protoc_insertion_point(destructor:ImagemMsgProto.Imagem.Pixel)
  SharedDtor();
}

void Imagem_Pixel::SharedDtor() {
}

void Imagem_Pixel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Imagem_Pixel& Imagem_Pixel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Imagem_Pixel_imagem_2eproto.base);
  return *internal_default_instance();
}


void Imagem_Pixel::Clear() {
// @@protoc_insertion_point(message_clear_start:ImagemMsgProto.Imagem.Pixel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&r_)) + sizeof(v_));
  _internal_metadata_.Clear();
}

const char* Imagem_Pixel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 u = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          u_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imagem_Pixel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImagemMsgProto.Imagem.Pixel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->r() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_r(), target);
  }

  // int32 g = 2;
  if (this->g() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_g(), target);
  }

  // int32 b = 3;
  if (this->b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_b(), target);
  }

  // int32 u = 4;
  if (this->u() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_u(), target);
  }

  // int32 v = 5;
  if (this->v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImagemMsgProto.Imagem.Pixel)
  return target;
}

size_t Imagem_Pixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImagemMsgProto.Imagem.Pixel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 r = 1;
  if (this->r() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_r());
  }

  // int32 g = 2;
  if (this->g() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_g());
  }

  // int32 b = 3;
  if (this->b() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_b());
  }

  // int32 u = 4;
  if (this->u() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_u());
  }

  // int32 v = 5;
  if (this->v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imagem_Pixel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImagemMsgProto.Imagem.Pixel)
  GOOGLE_DCHECK_NE(&from, this);
  const Imagem_Pixel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imagem_Pixel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImagemMsgProto.Imagem.Pixel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImagemMsgProto.Imagem.Pixel)
    MergeFrom(*source);
  }
}

void Imagem_Pixel::MergeFrom(const Imagem_Pixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImagemMsgProto.Imagem.Pixel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    _internal_set_r(from._internal_r());
  }
  if (from.g() != 0) {
    _internal_set_g(from._internal_g());
  }
  if (from.b() != 0) {
    _internal_set_b(from._internal_b());
  }
  if (from.u() != 0) {
    _internal_set_u(from._internal_u());
  }
  if (from.v() != 0) {
    _internal_set_v(from._internal_v());
  }
}

void Imagem_Pixel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImagemMsgProto.Imagem.Pixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imagem_Pixel::CopyFrom(const Imagem_Pixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImagemMsgProto.Imagem.Pixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imagem_Pixel::IsInitialized() const {
  return true;
}

void Imagem_Pixel::InternalSwap(Imagem_Pixel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  swap(u_, other->u_);
  swap(v_, other->v_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Imagem_Pixel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Imagem::InitAsDefaultInstance() {
}
class Imagem::_Internal {
 public:
};

Imagem::Imagem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImagemMsgProto.Imagem)
}
Imagem::Imagem(const Imagem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pixels_(from.pixels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_)) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:ImagemMsgProto.Imagem)
}

void Imagem::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Imagem_imagem_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
}

Imagem::~Imagem() {
  // @@protoc_insertion_point(destructor:ImagemMsgProto.Imagem)
  SharedDtor();
}

void Imagem::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Imagem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Imagem& Imagem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Imagem_imagem_2eproto.base);
  return *internal_default_instance();
}


void Imagem::Clear() {
// @@protoc_insertion_point(message_clear_start:ImagemMsgProto.Imagem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pixels_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_)) + sizeof(width_));
  _internal_metadata_.Clear();
}

const char* Imagem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ImagemMsgProto.Imagem.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pixels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Imagem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImagemMsgProto.Imagem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ImagemMsgProto.Imagem.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pixels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pixels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImagemMsgProto.Imagem)
  return target;
}

size_t Imagem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImagemMsgProto.Imagem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
  total_size += 1UL * this->_internal_pixels_size();
  for (const auto& msg : this->pixels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Imagem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImagemMsgProto.Imagem)
  GOOGLE_DCHECK_NE(&from, this);
  const Imagem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Imagem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImagemMsgProto.Imagem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImagemMsgProto.Imagem)
    MergeFrom(*source);
  }
}

void Imagem::MergeFrom(const Imagem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImagemMsgProto.Imagem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pixels_.MergeFrom(from.pixels_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
}

void Imagem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImagemMsgProto.Imagem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imagem::CopyFrom(const Imagem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImagemMsgProto.Imagem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imagem::IsInitialized() const {
  return true;
}

void Imagem::InternalSwap(Imagem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pixels_.InternalSwap(&other->pixels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Imagem::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ImagemMsgProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ImagemMsgProto::Imagem_Pixel* Arena::CreateMaybeMessage< ::ImagemMsgProto::Imagem_Pixel >(Arena* arena) {
  return Arena::CreateInternal< ::ImagemMsgProto::Imagem_Pixel >(arena);
}
template<> PROTOBUF_NOINLINE ::ImagemMsgProto::Imagem* Arena::CreateMaybeMessage< ::ImagemMsgProto::Imagem >(Arena* arena) {
  return Arena::CreateInternal< ::ImagemMsgProto::Imagem >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
