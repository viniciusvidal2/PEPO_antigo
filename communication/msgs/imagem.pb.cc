// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imagem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "imagem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ImagemMsgProto {
class Imagem_PixelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Imagem_Pixel> {
} _Imagem_Pixel_default_instance_;
class ImagemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Imagem> {
} _Imagem_default_instance_;

namespace protobuf_imagem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, u_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem_Pixel, v_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Imagem, pixels_),
  0,
  1,
  2,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(Imagem_Pixel)},
  { 14, 22, sizeof(Imagem)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Imagem_Pixel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Imagem_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "imagem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _Imagem_Pixel_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Imagem_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Imagem_Pixel_default_instance_.DefaultConstruct();
  _Imagem_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014imagem.proto\022\016ImagemMsgProto\"\243\001\n\006Image"
      "m\022\014\n\004name\030\001 \002(\t\022\016\n\006height\030\002 \002(\005\022\r\n\005width"
      "\030\003 \002(\005\022,\n\006pixels\030\004 \003(\0132\034.ImagemMsgProto."
      "Imagem.Pixel\032>\n\005Pixel\022\t\n\001r\030\001 \002(\005\022\t\n\001g\030\002 "
      "\002(\005\022\t\n\001b\030\003 \002(\005\022\t\n\001u\030\004 \002(\005\022\t\n\001v\030\005 \002(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 196);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "imagem.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_imagem_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imagem_Pixel::kRFieldNumber;
const int Imagem_Pixel::kGFieldNumber;
const int Imagem_Pixel::kBFieldNumber;
const int Imagem_Pixel::kUFieldNumber;
const int Imagem_Pixel::kVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imagem_Pixel::Imagem_Pixel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_imagem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImagemMsgProto.Imagem.Pixel)
}
Imagem_Pixel::Imagem_Pixel(const Imagem_Pixel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&r_) + sizeof(v_));
  // @@protoc_insertion_point(copy_constructor:ImagemMsgProto.Imagem.Pixel)
}

void Imagem_Pixel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r_, 0, reinterpret_cast<char*>(&v_) -
    reinterpret_cast<char*>(&r_) + sizeof(v_));
}

Imagem_Pixel::~Imagem_Pixel() {
  // @@protoc_insertion_point(destructor:ImagemMsgProto.Imagem.Pixel)
  SharedDtor();
}

void Imagem_Pixel::SharedDtor() {
}

void Imagem_Pixel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imagem_Pixel::descriptor() {
  protobuf_imagem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_imagem_2eproto::file_level_metadata[0].descriptor;
}

const Imagem_Pixel& Imagem_Pixel::default_instance() {
  protobuf_imagem_2eproto::InitDefaults();
  return *internal_default_instance();
}

Imagem_Pixel* Imagem_Pixel::New(::google::protobuf::Arena* arena) const {
  Imagem_Pixel* n = new Imagem_Pixel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imagem_Pixel::Clear() {
// @@protoc_insertion_point(message_clear_start:ImagemMsgProto.Imagem.Pixel)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&r_, 0, reinterpret_cast<char*>(&v_) -
      reinterpret_cast<char*>(&r_) + sizeof(v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Imagem_Pixel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImagemMsgProto.Imagem.Pixel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 r = 1;
      case 1: {
        if (tag == 8u) {
          set_has_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 g = 2;
      case 2: {
        if (tag == 16u) {
          set_has_g();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 b = 3;
      case 3: {
        if (tag == 24u) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 u = 4;
      case 4: {
        if (tag == 32u) {
          set_has_u();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &u_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 v = 5;
      case 5: {
        if (tag == 40u) {
          set_has_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImagemMsgProto.Imagem.Pixel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImagemMsgProto.Imagem.Pixel)
  return false;
#undef DO_
}

void Imagem_Pixel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImagemMsgProto.Imagem.Pixel)
  // required int32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->r(), output);
  }

  // required int32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->g(), output);
  }

  // required int32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->b(), output);
  }

  // required int32 u = 4;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->u(), output);
  }

  // required int32 v = 5;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->v(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImagemMsgProto.Imagem.Pixel)
}

::google::protobuf::uint8* Imagem_Pixel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImagemMsgProto.Imagem.Pixel)
  // required int32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->r(), target);
  }

  // required int32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->g(), target);
  }

  // required int32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->b(), target);
  }

  // required int32 u = 4;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->u(), target);
  }

  // required int32 v = 5;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->v(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImagemMsgProto.Imagem.Pixel)
  return target;
}

size_t Imagem_Pixel::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImagemMsgProto.Imagem.Pixel)
  size_t total_size = 0;

  if (has_r()) {
    // required int32 r = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r());
  }

  if (has_g()) {
    // required int32 g = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->g());
  }

  if (has_b()) {
    // required int32 b = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  if (has_u()) {
    // required int32 u = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());
  }

  if (has_v()) {
    // required int32 v = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());
  }

  return total_size;
}
size_t Imagem_Pixel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImagemMsgProto.Imagem.Pixel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 r = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->r());

    // required int32 g = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->g());

    // required int32 b = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());

    // required int32 u = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->u());

    // required int32 v = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->v());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imagem_Pixel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImagemMsgProto.Imagem.Pixel)
  GOOGLE_DCHECK_NE(&from, this);
  const Imagem_Pixel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imagem_Pixel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImagemMsgProto.Imagem.Pixel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImagemMsgProto.Imagem.Pixel)
    MergeFrom(*source);
  }
}

void Imagem_Pixel::MergeFrom(const Imagem_Pixel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImagemMsgProto.Imagem.Pixel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
}

void Imagem_Pixel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImagemMsgProto.Imagem.Pixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imagem_Pixel::CopyFrom(const Imagem_Pixel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImagemMsgProto.Imagem.Pixel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imagem_Pixel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Imagem_Pixel::Swap(Imagem_Pixel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imagem_Pixel::InternalSwap(Imagem_Pixel* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(u_, other->u_);
  std::swap(v_, other->v_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imagem_Pixel::GetMetadata() const {
  protobuf_imagem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_imagem_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imagem_Pixel

// required int32 r = 1;
bool Imagem_Pixel::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Imagem_Pixel::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void Imagem_Pixel::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void Imagem_Pixel::clear_r() {
  r_ = 0;
  clear_has_r();
}
::google::protobuf::int32 Imagem_Pixel::r() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.Pixel.r)
  return r_;
}
void Imagem_Pixel::set_r(::google::protobuf::int32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.Pixel.r)
}

// required int32 g = 2;
bool Imagem_Pixel::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Imagem_Pixel::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
void Imagem_Pixel::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void Imagem_Pixel::clear_g() {
  g_ = 0;
  clear_has_g();
}
::google::protobuf::int32 Imagem_Pixel::g() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.Pixel.g)
  return g_;
}
void Imagem_Pixel::set_g(::google::protobuf::int32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.Pixel.g)
}

// required int32 b = 3;
bool Imagem_Pixel::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Imagem_Pixel::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void Imagem_Pixel::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void Imagem_Pixel::clear_b() {
  b_ = 0;
  clear_has_b();
}
::google::protobuf::int32 Imagem_Pixel::b() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.Pixel.b)
  return b_;
}
void Imagem_Pixel::set_b(::google::protobuf::int32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.Pixel.b)
}

// required int32 u = 4;
bool Imagem_Pixel::has_u() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Imagem_Pixel::set_has_u() {
  _has_bits_[0] |= 0x00000008u;
}
void Imagem_Pixel::clear_has_u() {
  _has_bits_[0] &= ~0x00000008u;
}
void Imagem_Pixel::clear_u() {
  u_ = 0;
  clear_has_u();
}
::google::protobuf::int32 Imagem_Pixel::u() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.Pixel.u)
  return u_;
}
void Imagem_Pixel::set_u(::google::protobuf::int32 value) {
  set_has_u();
  u_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.Pixel.u)
}

// required int32 v = 5;
bool Imagem_Pixel::has_v() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Imagem_Pixel::set_has_v() {
  _has_bits_[0] |= 0x00000010u;
}
void Imagem_Pixel::clear_has_v() {
  _has_bits_[0] &= ~0x00000010u;
}
void Imagem_Pixel::clear_v() {
  v_ = 0;
  clear_has_v();
}
::google::protobuf::int32 Imagem_Pixel::v() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.Pixel.v)
  return v_;
}
void Imagem_Pixel::set_v(::google::protobuf::int32 value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.Pixel.v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Imagem::kNameFieldNumber;
const int Imagem::kHeightFieldNumber;
const int Imagem::kWidthFieldNumber;
const int Imagem::kPixelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Imagem::Imagem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_imagem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImagemMsgProto.Imagem)
}
Imagem::Imagem(const Imagem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      pixels_(from.pixels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_) + sizeof(width_));
  // @@protoc_insertion_point(copy_constructor:ImagemMsgProto.Imagem)
}

void Imagem::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&height_, 0, reinterpret_cast<char*>(&width_) -
    reinterpret_cast<char*>(&height_) + sizeof(width_));
}

Imagem::~Imagem() {
  // @@protoc_insertion_point(destructor:ImagemMsgProto.Imagem)
  SharedDtor();
}

void Imagem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Imagem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Imagem::descriptor() {
  protobuf_imagem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_imagem_2eproto::file_level_metadata[1].descriptor;
}

const Imagem& Imagem::default_instance() {
  protobuf_imagem_2eproto::InitDefaults();
  return *internal_default_instance();
}

Imagem* Imagem::New(::google::protobuf::Arena* arena) const {
  Imagem* n = new Imagem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Imagem::Clear() {
// @@protoc_insertion_point(message_clear_start:ImagemMsgProto.Imagem)
  pixels_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&height_, 0, reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&height_) + sizeof(width_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Imagem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImagemMsgProto.Imagem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImagemMsgProto.Imagem.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (tag == 16u) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (tag == 24u) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pixels()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImagemMsgProto.Imagem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImagemMsgProto.Imagem)
  return false;
#undef DO_
}

void Imagem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImagemMsgProto.Imagem)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImagemMsgProto.Imagem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
  for (unsigned int i = 0, n = this->pixels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pixels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImagemMsgProto.Imagem)
}

::google::protobuf::uint8* Imagem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ImagemMsgProto.Imagem)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImagemMsgProto.Imagem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
  for (unsigned int i = 0, n = this->pixels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->pixels(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImagemMsgProto.Imagem)
  return target;
}

size_t Imagem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ImagemMsgProto.Imagem)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_width()) {
    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  return total_size;
}
size_t Imagem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImagemMsgProto.Imagem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
  {
    unsigned int count = this->pixels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pixels(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Imagem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImagemMsgProto.Imagem)
  GOOGLE_DCHECK_NE(&from, this);
  const Imagem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Imagem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImagemMsgProto.Imagem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImagemMsgProto.Imagem)
    MergeFrom(*source);
  }
}

void Imagem::MergeFrom(const Imagem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImagemMsgProto.Imagem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pixels_.MergeFrom(from.pixels_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
}

void Imagem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImagemMsgProto.Imagem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Imagem::CopyFrom(const Imagem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImagemMsgProto.Imagem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Imagem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pixels())) return false;
  return true;
}

void Imagem::Swap(Imagem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Imagem::InternalSwap(Imagem* other) {
  pixels_.UnsafeArenaSwap(&other->pixels_);
  name_.Swap(&other->name_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Imagem::GetMetadata() const {
  protobuf_imagem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_imagem_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Imagem

// required string name = 1;
bool Imagem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Imagem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Imagem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Imagem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Imagem::name() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.name)
  return name_.GetNoArena();
}
void Imagem::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.name)
}
#if LANG_CXX11
void Imagem::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ImagemMsgProto.Imagem.name)
}
#endif
void Imagem::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImagemMsgProto.Imagem.name)
}
void Imagem::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImagemMsgProto.Imagem.name)
}
::std::string* Imagem::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ImagemMsgProto.Imagem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Imagem::release_name() {
  // @@protoc_insertion_point(field_release:ImagemMsgProto.Imagem.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Imagem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ImagemMsgProto.Imagem.name)
}

// required int32 height = 2;
bool Imagem::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Imagem::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
void Imagem::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
void Imagem::clear_height() {
  height_ = 0;
  clear_has_height();
}
::google::protobuf::int32 Imagem::height() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.height)
  return height_;
}
void Imagem::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.height)
}

// required int32 width = 3;
bool Imagem::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Imagem::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
void Imagem::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void Imagem::clear_width() {
  width_ = 0;
  clear_has_width();
}
::google::protobuf::int32 Imagem::width() const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.width)
  return width_;
}
void Imagem::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:ImagemMsgProto.Imagem.width)
}

// repeated .ImagemMsgProto.Imagem.Pixel pixels = 4;
int Imagem::pixels_size() const {
  return pixels_.size();
}
void Imagem::clear_pixels() {
  pixels_.Clear();
}
const ::ImagemMsgProto::Imagem_Pixel& Imagem::pixels(int index) const {
  // @@protoc_insertion_point(field_get:ImagemMsgProto.Imagem.pixels)
  return pixels_.Get(index);
}
::ImagemMsgProto::Imagem_Pixel* Imagem::mutable_pixels(int index) {
  // @@protoc_insertion_point(field_mutable:ImagemMsgProto.Imagem.pixels)
  return pixels_.Mutable(index);
}
::ImagemMsgProto::Imagem_Pixel* Imagem::add_pixels() {
  // @@protoc_insertion_point(field_add:ImagemMsgProto.Imagem.pixels)
  return pixels_.Add();
}
::google::protobuf::RepeatedPtrField< ::ImagemMsgProto::Imagem_Pixel >*
Imagem::mutable_pixels() {
  // @@protoc_insertion_point(field_mutable_list:ImagemMsgProto.Imagem.pixels)
  return &pixels_;
}
const ::google::protobuf::RepeatedPtrField< ::ImagemMsgProto::Imagem_Pixel >&
Imagem::pixels() const {
  // @@protoc_insertion_point(field_list:ImagemMsgProto.Imagem.pixels)
  return pixels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ImagemMsgProto

// @@protoc_insertion_point(global_scope)
