// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvm.proto

#include "nvm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace NVMMsgProto {
class NVMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NVM> _instance;
} _NVM_default_instance_;
}  // namespace NVMMsgProto
static void InitDefaultsscc_info_NVM_nvm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NVMMsgProto::_NVM_default_instance_;
    new (ptr) ::NVMMsgProto::NVM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NVMMsgProto::NVM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NVM_nvm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NVM_nvm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_nvm_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NVMMsgProto::NVM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NVMMsgProto::NVM, name_),
  PROTOBUF_FIELD_OFFSET(::NVMMsgProto::NVM, nlinhas_),
  PROTOBUF_FIELD_OFFSET(::NVMMsgProto::NVM, linhas_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NVMMsgProto::NVM)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::NVMMsgProto::_NVM_default_instance_),
};

const char descriptor_table_protodef_nvm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tnvm.proto\022\013NVMMsgProto\"4\n\003NVM\022\014\n\004name\030"
  "\001 \001(\t\022\017\n\007nlinhas\030\002 \001(\005\022\016\n\006linhas\030\003 \003(\tb\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvm_2eproto_sccs[1] = {
  &scc_info_NVM_nvm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvm_2eproto_once;
static bool descriptor_table_nvm_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvm_2eproto = {
  &descriptor_table_nvm_2eproto_initialized, descriptor_table_protodef_nvm_2eproto, "nvm.proto", 86,
  &descriptor_table_nvm_2eproto_once, descriptor_table_nvm_2eproto_sccs, descriptor_table_nvm_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_nvm_2eproto::offsets,
  file_level_metadata_nvm_2eproto, 1, file_level_enum_descriptors_nvm_2eproto, file_level_service_descriptors_nvm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvm_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvm_2eproto), true);
namespace NVMMsgProto {

// ===================================================================

void NVM::InitAsDefaultInstance() {
}
class NVM::_Internal {
 public:
};

NVM::NVM()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NVMMsgProto.NVM)
}
NVM::NVM(const NVM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      linhas_(from.linhas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  nlinhas_ = from.nlinhas_;
  // @@protoc_insertion_point(copy_constructor:NVMMsgProto.NVM)
}

void NVM::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NVM_nvm_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlinhas_ = 0;
}

NVM::~NVM() {
  // @@protoc_insertion_point(destructor:NVMMsgProto.NVM)
  SharedDtor();
}

void NVM::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NVM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NVM& NVM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NVM_nvm_2eproto.base);
  return *internal_default_instance();
}


void NVM::Clear() {
// @@protoc_insertion_point(message_clear_start:NVMMsgProto.NVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  linhas_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nlinhas_ = 0;
  _internal_metadata_.Clear();
}

const char* NVM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NVMMsgProto.NVM.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nlinhas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nlinhas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string linhas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_linhas();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "NVMMsgProto.NVM.linhas"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NVM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NVMMsgProto.NVM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NVMMsgProto.NVM.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 nlinhas = 2;
  if (this->nlinhas() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nlinhas(), target);
  }

  // repeated string linhas = 3;
  for (int i = 0, n = this->_internal_linhas_size(); i < n; i++) {
    const auto& s = this->_internal_linhas(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "NVMMsgProto.NVM.linhas");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NVMMsgProto.NVM)
  return target;
}

size_t NVM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NVMMsgProto.NVM)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string linhas = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(linhas_.size());
  for (int i = 0, n = linhas_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      linhas_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 nlinhas = 2;
  if (this->nlinhas() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nlinhas());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NVM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NVMMsgProto.NVM)
  GOOGLE_DCHECK_NE(&from, this);
  const NVM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NVM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NVMMsgProto.NVM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NVMMsgProto.NVM)
    MergeFrom(*source);
  }
}

void NVM::MergeFrom(const NVM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NVMMsgProto.NVM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  linhas_.MergeFrom(from.linhas_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.nlinhas() != 0) {
    _internal_set_nlinhas(from._internal_nlinhas());
  }
}

void NVM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NVMMsgProto.NVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NVM::CopyFrom(const NVM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NVMMsgProto.NVM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVM::IsInitialized() const {
  return true;
}

void NVM::InternalSwap(NVM* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  linhas_.InternalSwap(&other->linhas_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nlinhas_, other->nlinhas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NVM::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NVMMsgProto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NVMMsgProto::NVM* Arena::CreateMaybeMessage< ::NVMMsgProto::NVM >(Arena* arena) {
  return Arena::CreateInternal< ::NVMMsgProto::NVM >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
